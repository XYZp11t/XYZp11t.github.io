---
// Componente para visualizar el modelo 3D de capas solares
---

<div class="modelo-container">
  <div id="contenedor-modelo" style="position:relative;">
    <canvas id="modelo-canvas" draggable="false"></canvas>
    <div id="loading" class="loading-overlay">
      <div class="loading-spinner"></div>
      <p>Cargando modelo 3D...</p>
    </div>
    <div id="error" class="error-overlay" style="display: none;">
      <p>Error al cargar el modelo. Verifica la consola para más detalles.</p>
    </div>
    <div class="controles-checkbox floating" id="controles-checkbox">
      <div class="controles-header" id="controles-header">
        <span> Controles </span>
        <button id="btn-minimizar" aria-label="Minimizar">_</button>
      </div>
      <div class="controles-opciones" id="controles-opciones">
        <label><input type="checkbox" id="chk-corte" checked> Aplicar corte</label>
        <label><input type="checkbox" id="chk-cromosfera" checked> Ver cromosfera</label>
        <label><input type="checkbox" id="chk-labels" checked> Mostrar etiquetas</label>
        <button id="btn-reset" class="control-btn">Resetear Vista</button>
        <button id="btn-rotar" class="control-btn">Rotar Modelo</button>
      </div>
    </div>
    
    <!-- Contenedor de etiquetas -->
    <div id="labels-container" class="labels-container">
      <!-- Etiquetas estáticas -->
      <div id="label-nucleo" class="layer-label" data-layer="nucleo">
        <span class="info-icon" aria-label="info">
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="#2056a8" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"/><line x1="12" y1="16" x2="12" y2="12"/><line x1="12" y1="8" x2="12" y2="8"/></svg>
        </span>
        <span class="label-text">Núcleo</span>
      </div>
      
      <div id="label-zonaRadiativa" class="layer-label" data-layer="zonaRadiativa">
        <span class="info-icon" aria-label="info">
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="#2056a8" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"/><line x1="12" y1="16" x2="12" y2="12"/><line x1="12" y1="8" x2="12" y2="8"/></svg>
        </span>
        <span class="label-text">Zona Radiativa</span>
      </div>
      
      <div id="label-zonaConvectiva" class="layer-label" data-layer="zonaConvectiva">
        <span class="info-icon" aria-label="info">
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="#2056a8" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"/><line x1="12" y1="16" x2="12" y2="12"/><line x1="12" y1="8" x2="12" y2="8"/></svg>
        </span>
        <span class="label-text">Zona Convectiva</span>
      </div>
      
      <div id="label-fotosfera" class="layer-label" data-layer="fotosfera">
        <span class="info-icon" aria-label="info">
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="#2056a8" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"/><line x1="12" y1="16" x2="12" y2="12"/><line x1="12" y1="8" x2="12" y2="8"/></svg>
        </span>
        <span class="label-text">Fotosfera</span>
      </div>
      
      <div id="label-cromosfera" class="layer-label" data-layer="cromosfera">
        <span class="info-icon" aria-label="info">
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="#2056a8" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"/><line x1="12" y1="16" x2="12" y2="12"/><line x1="12" y1="8" x2="12" y2="8"/></svg>
        </span>
        <span class="label-text">Cromosfera</span>
      </div>
      
      <div id="label-corona" class="layer-label" data-layer="corona">
        <span class="info-icon" aria-label="info">
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="#2056a8" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"/><line x1="12" y1="16" x2="12" y2="12"/><line x1="12" y1="8" x2="12" y2="8"/></svg>
        </span>
        <span class="label-text">Corona</span>
      </div>
      
      <div id="label-arcosSolares" class="layer-label" data-layer="arcosSolares">
        <span class="info-icon" aria-label="info">
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="#2056a8" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"/><line x1="12" y1="16" x2="12" y2="12"/><line x1="12" y1="8" x2="12" y2="8"/></svg>
        </span>
        <span class="label-text">Arcos Solares</span>
      </div>
      
      <!-- SVG para las líneas -->
      <svg id="label-lines" width="100%" height="100%" xmlns="http://www.w3.org/2000/svg" class="lines-container">
        <line class="label-line" data-layer="nucleo"></line>
        <line class="label-line" data-layer="zonaRadiativa"></line>
        <line class="label-line" data-layer="zonaConvectiva"></line>
        <line class="label-line" data-layer="fotosfera"></line>
        <line class="label-line" data-layer="cromosfera"></line>
        <line class="label-line" data-layer="corona"></line>
        <line class="label-line" data-layer="arcosSolares"></line>
      </svg>
    </div>

    <!-- Ventana de información -->
    <div id="info-window" class="info-window" style="display: none;">
      <div class="info-window-content">
        <div class="info-window-header">
          <h3 id="info-window-title"></h3>
          <button id="info-window-close" class="info-window-close" aria-label="Cerrar">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="-2 -2 24 24" width="24" height="24" fill="#000000">
              <path d="m11.414 10 2.829 2.828a1 1 0 0 1-1.415 1.415L10 11.414l-2.828 2.829a1 1 0 1 1-1.415-1.415L8.586 10 5.757 7.172a1 1 0 0 1 1.415-1.415L10 8.586l2.828-2.829a1 1 0 0 1 1.415 1.415L11.414 10zM10 20C4.477 20 0 15.523 0 10S4.477 0 10 0s10 4.477 10 10-4.477 10-10 10zm0-2a8 8 0 1 0 0-16 8 8 0 0 0 0 16z" fill="#000000"/>
            </svg>
          </button>
        </div>
        <div class="info-window-body" id="info-window-body">
          <!-- El contenido se llenará dinámicamente -->
        </div>
      </div>
    </div>
    <button id="btn-fullscreen" class="fullscreen-btn" aria-label="Pantalla completa">
      <svg class="fullscreen-icon enter" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="#000000">
        <path d="M16 3H22V9H20V5H16V3ZM2 3H8V5H4V9H2V3ZM20 19V15H22V21H16V19H20ZM4 19H8V21H2V15H4V19Z" fill="#000000"/>
      </svg>
      <svg class="fullscreen-icon exit" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="#000000" style="display: none;">
        <path d="M18 7H22V9H16V3H18V7ZM8 9H2V7H6V3H8V9ZM18 17V21H16V15H22V17H18ZM8 15V21H6V17H2V15H8Z" fill="#000000"/>
      </svg>
    </button>
  </div>
  <!-- Elimina la sección de controles principal -->
  <!-- <div class="controles"> ... </div> -->
</div>

<script>
  import * as THREE from 'three';
  import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
  import { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js';
  import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';

  document.addEventListener('DOMContentLoaded', () => {
    const contenedor = document.getElementById('contenedor-modelo');
    const canvas = document.getElementById('modelo-canvas');
    const loadingElement = document.getElementById('loading');
    const errorElement = document.getElementById('error');
    
    if (!contenedor || !canvas) {
      console.error('No se encontraron los elementos del contenedor');
      return;
    }

    const ancho = contenedor.clientWidth;
    const alto = contenedor.clientHeight;

    console.log('Iniciando visualizador 3D...');
    console.log('Dimensiones del canvas:', ancho, 'x', alto);

    // Configuración de la escena
    const escena = new THREE.Scene();
    // escena.background = new THREE.Color(0x1a1a1a); // Quitamos el fondo sólido

    // Fondo equirectangular
    const textureLoader = new THREE.TextureLoader();
    textureLoader.load('/texturas/2k_stars_milky_way.jpg', (texture) => {
      texture.mapping = THREE.EquirectangularReflectionMapping;
      escena.background = texture;
    });

    // Configuración de la cámara
    const camara = new THREE.PerspectiveCamera(75, ancho / alto, 0.1, 1000);
    camara.position.set(10, 10, 10);

    // Configuración del renderizador
    const renderizador = new THREE.WebGLRenderer({ 
      canvas, 
      antialias: true
    });
    renderizador.setSize(ancho, alto);
    renderizador.setPixelRatio(Math.min(window.devicePixelRatio, 2));

    // Controles de órbita
    const controles = new OrbitControls(camara, renderizador.domElement);
    controles.enableDamping = true;
    controles.dampingFactor = 0.05;
    controles.enableRotate = true; // Permitir rotación con mouse
    controles.enablePan = false;   // No permitir arrastrar el modelo fuera de su posición
    // controles.minAzimuthAngle = controles.maxAzimuthAngle = undefined; // (Opcional: limitar ángulos)

    // Iluminación
    const luzAmbiente = new THREE.AmbientLight(0xffffff, 2.5);
    escena.add(luzAmbiente);

    const luzDireccional = new THREE.DirectionalLight(0xffffff, 1.5);
    luzDireccional.position.set(10, 10, 5);
    escena.add(luzDireccional);

    // Configurar DRACOLoader para modelos comprimidos
    const dracoLoader = new DRACOLoader();
    dracoLoader.setDecoderPath('https://www.gstatic.com/draco/versioned/decoders/1.5.6/');
    dracoLoader.setDecoderConfig({ type: 'js' });
    
    // Cargar el modelo GLB
    const loader = new GLTFLoader();
    loader.setDRACOLoader(dracoLoader);
    let modelo: any = null;
    let rotacionAutomatica = false;
    /** @type {Record<string, THREE.Mesh | undefined>} */
    let meshes = {
      fotosferaExterior: undefined,
      cromosferaExterior: undefined,
      nucleo: undefined,
      zonaRadiativaCorte: undefined,
      zonaConvectivaCorte: undefined,
      fotosferaCorteT: undefined,
      fotosferaCorte: undefined,
      cromosferaCorteT: undefined,
      cromosferaCorte: undefined,
      arcosSolares: undefined
    };
    
    // Variables para la corona
    let corona: THREE.Mesh | null = null;
    let corteActivo = true;
    let cromosferaActiva = true;
    let labelsActivos = true;
    
    // Variables para las etiquetas
    const labelsContainer = document.getElementById('labels-container');
    const labelLines = document.getElementById('label-lines');
    
    // Datos de las capas solares
    const capasData = {
      nucleo: {
        nombre: "Núcleo",
        descripcion: "El corazón del Sol donde ocurre la fusión nuclear. Átomos de hidrógeno se fusionan para formar helio, liberando una inmensa cantidad de energía. Es un reactor de fusión natural que produce toda la luz y el calor del Sol, vital para la vida en la Tierra.",
        extension: "175 mil km desde el centro",
        temperatura: "15 millones °C",
        densidad: "150 g/cm³ (10 veces mayor que el oro)",
        fenomenos_clave: ["Fusión nuclear (hidrógeno a helio)"],
        porcentaje_radio_solar: "~25%"
      },
      zonaRadiativa: {
        nombre: "Zona Radiativa",
        descripcion: "Capa donde la energía del núcleo viaja hacia afuera por radiación. Los fotones son absorbidos y reemitidos repetidamente, haciendo que su viaje sea extremadamente lento (hasta un millón de años para un solo fotón).",
        extension: "De 175 mil km a 488 mil km desde el centro",
        espesor: "310 mil km",
        temperatura: "De 7 millones °C a 2 millones °C",
        densidad: "Decae de 20 g/cm³ a 0.2 g/cm³",
        fenomenos_clave: ["Transporte de energía por radiación", "Viaje lento de fotones"],
        porcentaje_radio_solar: "~25% a ~70%"
      },
      zonaConvectiva: {
        nombre: "Zona Convectiva",
        descripcion: "Última capa interna, donde el transporte de energía cambia a convección. Columnas de plasma caliente suben, se enfrían y descienden, llevando la energía hacia las capas externas. Genera un patrón granulado en la superficie visible del Sol.",
        extension: "De 488 mil km a 700 mil km (aproximadamente, hasta la superficie visible)",
        espesor: "200 mil km",
        temperatura: "Desciende desde la Zona Radiativa hasta unos 5,500 °C en la superficie visible",
        densidad: "Menor que en la Zona Radiativa",
        fenomenos_clave: ["Transporte de energía por convección", "Celdas de convección"],
        porcentaje_radio_solar: "~70% a ~100%"
      },
      fotosfera: {
        nombre: "Fotosfera",
        descripcion: "La 'superficie' visible del Sol de donde proviene la mayor parte de la luz solar. No es sólida y presenta fenómenos como manchas solares y granulación.",
        distancia_radio: "Superficie visible del Sol",
        espesor: "100 km",
        temperatura: "5,500 °C (3,400 °C en las manchas solares)",
        fenomenos_clave: ["Manchas solares", "Granulación"],
        porcentaje_radio_solar: "100%"
      },
      cromosfera: {
        nombre: "Cromosfera",
        descripcion: "Capa atmosférica por encima de la fotosfera. Normalmente opacada por la luz de la fotosfera, pero visible como un halo rojizo durante los eclipses totales o con filtros H-alpha. Es muy dinámica, con chorros de gas llamados espículas.",
        distancia_radio: "Justo por encima de la fotosfera",
        espesor: "2,000 km",
        temperatura: "De 5,500 °C a 20,000 °C",
        fenomenos_clave: ["Tono rosado (emisión de hidrógeno)", "Espículas"],
        porcentaje_radio_solar: "Ligeramente por encima del 100%"
      },
      corona: {
        nombre: "Corona",
        descripcion: "La atmósfera exterior del Sol, visible durante los eclipses totales como un halo blanco brillante. Es mucho más caliente que la superficie del Sol y se extiende millones de kilómetros hacia el espacio.",
        distancia_radio: "Por encima de la cromosfera",
        espesor: "Millones de kilómetros",
        temperatura: "1-3 millones °C",
        fenomenos_clave: ["Viento solar", "Eyecciones de masa coronal", "Brillo durante eclipses"],
        porcentaje_radio_solar: "Mucho más allá del 100%"
      },
      arcosSolares: {
        nombre: "Arcos Solares",
        descripcion: "Estructuras magnéticas en forma de arco que se forman en la corona solar. Son regiones donde el plasma solar sigue las líneas del campo magnético, creando espectaculares formaciones visibles en longitudes de onda específicas.",
        distancia_radio: "En la corona solar",
        espesor: "Variable",
        temperatura: "1-3 millones °C",
        fenomenos_clave: ["Estructuras magnéticas", "Plasma confinado", "Actividad solar"],
        porcentaje_radio_solar: "En la corona"
      }
    };
    
    // Hotspots 3D para cada capa (posiciones en el modelo 3D)
    const hotspots3D = {
      nucleo: new THREE.Vector3(0, 0, 0),
      zonaRadiativa: new THREE.Vector3(0.25, 0.4, 0),
      zonaConvectiva: new THREE.Vector3(0.35, 0.8, 0),
      fotosfera: new THREE.Vector3(-0.02, 0.98, -0.1),
      cromosfera: new THREE.Vector3(0.1, 1, 0),
      corona: new THREE.Vector3(0.8, 0.8, 0.3),
      arcosSolares: new THREE.Vector3(0.5, -0.2, -1.1)
    };
    
    // Posiciones 2D de las etiquetas (porcentajes del canvas)
    const labelPositions = {
      nucleo: { x: 63, y: 71 },
      zonaRadiativa: { x: 69, y: 55 },
      zonaConvectiva: { x: 68, y: 40 },
      fotosfera: { x: 64, y: 24 },
      cromosfera: { x: 50, y: 10 },
      corona: { x: 34, y: 8 },
      arcosSolares: { x: 50, y: 85 }
    };
    
    // Referencias a los elementos DOM de las etiquetas
    const labelElements = {
      nucleo: document.getElementById('label-nucleo'),
      zonaRadiativa: document.getElementById('label-zonaRadiativa'),
      zonaConvectiva: document.getElementById('label-zonaConvectiva'),
      fotosfera: document.getElementById('label-fotosfera'),
      cromosfera: document.getElementById('label-cromosfera'),
      corona: document.getElementById('label-corona'),
      arcosSolares: document.getElementById('label-arcosSolares')
    };
    
    // Referencias a las líneas SVG
    const lineElements = {
      nucleo: labelLines?.querySelector('[data-layer="nucleo"]') as SVGLineElement,
      zonaRadiativa: labelLines?.querySelector('[data-layer="zonaRadiativa"]') as SVGLineElement,
      zonaConvectiva: labelLines?.querySelector('[data-layer="zonaConvectiva"]') as SVGLineElement,
      fotosfera: labelLines?.querySelector('[data-layer="fotosfera"]') as SVGLineElement,
      cromosfera: labelLines?.querySelector('[data-layer="cromosfera"]') as SVGLineElement,
      corona: labelLines?.querySelector('[data-layer="corona"]') as SVGLineElement,
      arcosSolares: labelLines?.querySelector('[data-layer="arcosSolares"]') as SVGLineElement
    };

    // Función para proyectar coordenadas 3D a 2D
    function proyectar3Da2D(posicion3D: THREE.Vector3): { x: number, y: number } {
      // Crear un vector temporal para la proyección
      const vector = posicion3D.clone();
      
      // Aplicar la transformación del modelo (rotación, posición, etc.)
      if (modelo) {
        vector.applyMatrix4(modelo.matrixWorld);
      }
      
      // Proyectar usando la cámara
      vector.project(camara);
      
      // Convertir a coordenadas de pantalla
      const canvasRect = canvas?.getBoundingClientRect();
      if (!canvasRect) return { x: 0, y: 0 };
      
      const x = (vector.x * 0.5 + 0.5) * canvasRect.width;
      const y = (-vector.y * 0.5 + 0.5) * canvasRect.height;
      
      return { x, y };
    }

    // Función para ajustar posiciones de hotspots 3D (para debugging)
    function ajustarHotspot3D(capa: string, x: number, y: number, z: number) {
      if (hotspots3D[capa as keyof typeof hotspots3D]) {
        hotspots3D[capa as keyof typeof hotspots3D].set(x, y, z);
        console.log(`Hotspot ${capa} ajustado a:`, x, y, z);
      }
    }

    // Función para mostrar información de una capa
    function mostrarInformacionCapa(capaKey: string) {
      const infoWindow = document.getElementById('info-window');
      const infoWindowTitle = document.getElementById('info-window-title');
      const infoWindowBody = document.getElementById('info-window-body');
      
      if (!infoWindow || !infoWindowTitle || !infoWindowBody) return;
      
      const capaData = capasData[capaKey as keyof typeof capasData];
      if (!capaData) return;
      
      // Llenar el título
      infoWindowTitle.textContent = capaData.nombre;
      
      // Crear el contenido HTML
      let contenidoHTML = `
        <div class="info-section">
          <p class="info-description">${capaData.descripcion}</p>
        </div>
      `;
      
      // Añadir información específica según la capa
      if ('extension' in capaData && capaData.extension) {
        contenidoHTML += `
          <div class="info-section">
            <h4>Extensión</h4>
            <p>${capaData.extension}</p>
          </div>
        `;
      }
      
      if ('espesor' in capaData && capaData.espesor) {
        contenidoHTML += `
          <div class="info-section">
            <h4>Espesor</h4>
            <p>${capaData.espesor}</p>
          </div>
        `;
      }
      
      if ('distancia_radio' in capaData && capaData.distancia_radio) {
        contenidoHTML += `
          <div class="info-section">
            <h4>Distancia</h4>
            <p>${capaData.distancia_radio}</p>
          </div>
        `;
      }
      
      if ('temperatura' in capaData && capaData.temperatura) {
        contenidoHTML += `
          <div class="info-section">
            <h4>Temperatura</h4>
            <p>${capaData.temperatura}</p>
          </div>
        `;
      }
      
      if ('densidad' in capaData && capaData.densidad) {
        contenidoHTML += `
          <div class="info-section">
            <h4>Densidad</h4>
            <p>${capaData.densidad}</p>
          </div>
        `;
      }
      
      if (capaData.fenomenos_clave && capaData.fenomenos_clave.length > 0) {
        contenidoHTML += `
          <div class="info-section">
            <h4>Fenómenos Clave</h4>
            <ul>
              ${capaData.fenomenos_clave.map(fenomeno => `<li>${fenomeno}</li>`).join('')}
            </ul>
          </div>
        `;
      }
      
      if (capaData.porcentaje_radio_solar) {
        contenidoHTML += `
          <div class="info-section">
            <h4>Radio Solar</h4>
            <p>${capaData.porcentaje_radio_solar}</p>
          </div>
        `;
      }
      
      infoWindowBody.innerHTML = contenidoHTML;
      
      // Mostrar la ventana
      infoWindow.style.display = 'flex';
      
      // Resetear el scroll al inicio después de mostrar la ventana
      setTimeout(() => {
        const infoWindowContent = infoWindow.querySelector('.info-window-content');
        if (infoWindowContent) {
          infoWindowContent.scrollTop = 0;
        }
      }, 10);
      
      // Añadir evento para cerrar con clic fuera
      setTimeout(() => {
        infoWindow.addEventListener('click', cerrarVentanaInfo);
      }, 100);
    }
    
    // Función para cerrar la ventana de información
    function cerrarVentanaInfo(event: Event) {
      const infoWindow = document.getElementById('info-window');
      const infoWindowContent = infoWindow?.querySelector('.info-window-content');
      
      if (!infoWindow || !infoWindowContent) return;
      
      // Si el clic fue en el fondo (no en el contenido), cerrar
      if (event.target === infoWindow) {
        infoWindow.style.display = 'none';
        infoWindow.removeEventListener('click', cerrarVentanaInfo);
      }
    }
    
    // Configurar el botón de cerrar
    const infoWindowClose = document.getElementById('info-window-close');
    if (infoWindowClose) {
      infoWindowClose.addEventListener('click', () => {
        const infoWindow = document.getElementById('info-window');
        if (infoWindow) {
          infoWindow.style.display = 'none';
        }
      });
    }

    // Event listener para la tecla ESC
    window.addEventListener('keydown', (event) => {
      if (event.key === 'Escape') {
        const infoWindow = document.getElementById('info-window');
        if (infoWindow && infoWindow.style.display === 'flex') {
          // Si hay ventana visible, cerrarla
          infoWindow.style.display = 'none';
          // Prevenir que el navegador salga de pantalla completa
          event.preventDefault();
          event.stopPropagation();
        }
        // Si no hay ventana visible, dejar que el navegador maneje ESC normalmente
      }
    });

    // Función para actualizar posición de las etiquetas
    function actualizarPosicionEtiquetas() {
      if (!modelo || !canvas) return;
      
      // Obtener las dimensiones actuales del canvas
      const canvasRect = canvas.getBoundingClientRect();
      const canvasWidth = canvasRect.width;
      const canvasHeight = canvasRect.height;
      
      Object.keys(labelElements).forEach(key => {
        const labelElement = labelElements[key as keyof typeof labelElements];
        const lineElement = lineElements[key as keyof typeof lineElements];
        const hotspot3D = hotspots3D[key as keyof typeof hotspots3D];
        const labelPos = labelPositions[key as keyof typeof labelPositions];
        
        if (!labelElement || !lineElement) return;
        
        // Determinar si mostrar la etiqueta
        let mostrar = labelsActivos && corteActivo;
        
        // Si las etiquetas están activas y el corte está activo, verificar cromosfera
        if (mostrar && key === 'cromosfera' && !cromosferaActiva) {
          mostrar = false;
        }
        
        // Mostrar etiquetas de corona y arcos solares siempre que las etiquetas estén activas
        if (mostrar && (key === 'corona' || key === 'arcosSolares')) {
          mostrar = true;
        }
        
        if (mostrar) {
          // Calcular posición en píxeles basada en porcentajes
          const x = (labelPos.x / 100) * canvasWidth;
          const y = (labelPos.y / 100) * canvasHeight;

          // Proyectar el hotspot 3D a coordenadas 2D
          const hotspot2D = proyectar3Da2D(hotspot3D);

          // Mostrar elementos
          labelElement.style.display = 'block';
          lineElement.style.display = 'block';

          // Posicionar etiqueta
          labelElement.style.left = x + 'px';
          labelElement.style.top = y + 'px';

          // --- Ajuste para que la línea termine más cerca del centro de la etiqueta ---
          const etiquetaAncho = labelElement.offsetWidth || 60;
          const etiquetaAlto = labelElement.offsetHeight || 30;
          const offsetX = 8;
          const offsetY = etiquetaAlto / 2; // centro vertical

          lineElement.setAttribute('x1', (x + offsetX).toString());
          lineElement.setAttribute('y1', (y + offsetY).toString());
          lineElement.setAttribute('x2', hotspot2D.x.toString());
          lineElement.setAttribute('y2', hotspot2D.y.toString());
        } else {
          labelElement.style.display = 'none';
          lineElement.style.display = 'none';
        }
      });
    }

    // Función para actualizar visibilidad de las capas
    function actualizarVisibilidad() {
      if (!meshes) return;
      if (corteActivo) {
        // Mostrar solo el sol cortado
        if (meshes.nucleo) (meshes.nucleo as any).visible = true;
        if (meshes.zonaRadiativaCorte) (meshes.zonaRadiativaCorte as any).visible = true;
        if (meshes.zonaConvectivaCorte) (meshes.zonaConvectivaCorte as any).visible = true;
        if (meshes.fotosferaCorteT) (meshes.fotosferaCorteT as any).visible = true;
        if (meshes.fotosferaCorte) (meshes.fotosferaCorte as any).visible = true;
        if (meshes.cromosferaCorteT) (meshes.cromosferaCorteT as any).visible = cromosferaActiva;
        if (meshes.cromosferaCorte) (meshes.cromosferaCorte as any).visible = cromosferaActiva;
        if (meshes.arcosSolares) (meshes.arcosSolares as any).visible = true;
        // Ocultar sol completo
        if (meshes.fotosferaExterior) (meshes.fotosferaExterior as any).visible = false;
        if (meshes.cromosferaExterior) (meshes.cromosferaExterior as any).visible = false;
        // Si la cromosfera está desactivada, ocultar cromosfera cortada
        if (!cromosferaActiva) {
          if (meshes.cromosferaCorteT) (meshes.cromosferaCorteT as any).visible = false;
          if (meshes.cromosferaCorte) (meshes.cromosferaCorte as any).visible = false;
        }
      } else {
        // Mostrar solo el sol completo
        if (meshes.fotosferaExterior) (meshes.fotosferaExterior as any).visible = true;
        if (meshes.cromosferaExterior) (meshes.cromosferaExterior as any).visible = cromosferaActiva;
        if (meshes.arcosSolares) (meshes.arcosSolares as any).visible = true;
        // Ocultar sol cortado
        if (meshes.nucleo) (meshes.nucleo as any).visible = false;
        if (meshes.zonaRadiativaCorte) (meshes.zonaRadiativaCorte as any).visible = false;
        if (meshes.zonaConvectivaCorte) (meshes.zonaConvectivaCorte as any).visible = false;
        if (meshes.fotosferaCorteT) (meshes.fotosferaCorteT as any).visible = false;
        if (meshes.fotosferaCorte) (meshes.fotosferaCorte as any).visible = false;
        if (meshes.cromosferaCorteT) (meshes.cromosferaCorteT as any).visible = false;
        if (meshes.cromosferaCorte) (meshes.cromosferaCorte as any).visible = false;
      }
    }

    console.log('Intentando cargar modelo desde: /models/capasSolares.glb');

    loader.load('/models/capasSolares.glb', 
      (gltf) => {
        console.log('Modelo cargado exitosamente:', gltf);
        modelo = gltf.scene;
        escena.add(modelo);

        // Centrar el modelo
        const box = new THREE.Box3().setFromObject(modelo as any);
        const center = box.getCenter(new THREE.Vector3());
        const size = box.getSize(new THREE.Vector3());
        
        console.log('Dimensiones del modelo:', size);
        console.log('Centro del modelo:', center);
        
        modelo.position.sub(center);
        
        // Rotar azimutalmente por defecto
        modelo.rotation.set(0, -Math.PI/2, 0);
        
        // Ajustar la cámara
        const maxDim = Math.max(size.x, size.y, size.z);
        const fov = camara.fov * (Math.PI / 180);
        let cameraZ = Math.abs(maxDim / 2 / Math.tan(fov / 2));
        cameraZ *= 1.1; // Más cerca para que el modelo se vea grande
        camara.position.set(cameraZ, cameraZ, cameraZ);
        camara.lookAt(0, 0, 0);
        
        controles.target.set(0, 0, 0);
        controles.update();

        // Mapear los meshes relevantes
        (modelo as any).traverse((obj: any) => {
          if (obj.type === 'Mesh') {
            const mesh = obj as any;
            switch (mesh.name) {
              case 'Fotosfera_Exterior':
                meshes.fotosferaExterior = mesh;
                break;
              case 'Cromosfera_Exterior':
                meshes.cromosferaExterior = mesh;
                break;
              case 'Nucleo':
                meshes.nucleo = mesh;
                break;
              case 'Zona_Radiativa_Corte':
                meshes.zonaRadiativaCorte = mesh;
                break;
              case 'Zona_Convectiva_Corte':
                meshes.zonaConvectivaCorte = mesh;
                break;
              case 'Fotosfera_Corte_T':
                meshes.fotosferaCorteT = mesh;
                break;
              case 'Fotosfera_Corte':
                meshes.fotosferaCorte = mesh;
                break;
              case 'Cromosfera_Corte_T':
                meshes.cromosferaCorteT = mesh;
                break;
              case 'Cromosfera_Corte':
                meshes.cromosferaCorte = mesh;
                break;
              case 'Arcos_Solares':
                meshes.arcosSolares = mesh;
                break;
            }
          }
        });
        
        // Crear la corona con shaders
        const vertexShader = `
          varying vec3 vNormal;
          void main() {
            vNormal = normalize(normalMatrix * normal);
            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
          }
        `;

        const fragmentShader = `
          varying vec3 vNormal;
          void main() {
            float intensity = pow(0.7 - dot(vNormal, vec3(0.0, 0.0, 1.0)), 2.0);
            gl_FragColor = vec4(1.0, 0.9, 0.8, 1.0) * intensity;
          }
        `;

        const coronaMaterial = new THREE.ShaderMaterial({
          uniforms: {},
          vertexShader,
          fragmentShader,
          side: THREE.BackSide,
          blending: THREE.AdditiveBlending,
          transparent: true
        });

        const coronaGeometry = new THREE.SphereGeometry(1.0, 32, 32);
        coronaGeometry.scale(1.3, 1.3, 1.3);
        
        corona = new THREE.Mesh(coronaGeometry, coronaMaterial);
        // Posicionar la corona en la misma posición que el modelo
        corona.position.copy(modelo.position);
        // Aplicar la misma rotación inicial que el modelo
        corona.rotation.copy(modelo.rotation);
        escena.add(corona);
        // Inicializar visibilidad
        actualizarVisibilidad();

        // Añadir eventos de clic a las etiquetas
        Object.keys(labelElements).forEach(key => {
          const labelElement = labelElements[key as keyof typeof labelElements];
          if (labelElement) {
            labelElement.addEventListener('click', () => {
              console.log('Clic en etiqueta:', key);
              mostrarInformacionCapa(key);
            });
          }
        });

        // Inicializar posición de etiquetas
        actualizarPosicionEtiquetas();

        // Ocultar loading
        if (loadingElement) {
          loadingElement.style.display = 'none';
        }

        console.log('Modelo configurado y listo para renderizar');
      }, 
      (xhr) => {
        const progress = (xhr.loaded / xhr.total * 100);
        console.log('Progreso de carga:', progress + '%');
        if (loadingElement) {
          const pElement = loadingElement.querySelector('p');
          if (pElement) {
            pElement.textContent = `Cargando modelo 3D... ${Math.round(progress)} %`;}
        }
      }, 
      (error) => {
        console.error('Error al cargar el modelo:', error);
        if (loadingElement) {
          loadingElement.style.display = 'none';
        }
        if (errorElement) {
          errorElement.style.display = 'flex';
        }
      }
    );

    // Función de animación
    function animar() {
      requestAnimationFrame(animar);
      
      if (modelo && rotacionAutomatica) {
        modelo.rotation.y += 0.01;
      }
      
      // Rotación de la corona
      if (corona) {
        if (rotacionAutomatica) {
          // Si la rotación automática está activa, la corona sigue al modelo
          corona.rotation.copy(modelo.rotation);
        } else {
          // Si no, solo una rotación suave independiente
          corona.rotation.y += 0.0001;
        }
      }
      
      controles.update();
      renderizador.render(escena, camara);
      
      // Actualizar posición de etiquetas en cada frame
      actualizarPosicionEtiquetas();
    }

    // Manejo de redimensionamiento
    function onWindowResize() {
      if (!contenedor || !canvas) return;
      const nuevoAncho = contenedor.clientWidth;
      const nuevoAlto = contenedor.clientHeight;
      camara.aspect = nuevoAncho / nuevoAlto;
      camara.updateProjectionMatrix();
      renderizador.setSize(nuevoAncho, nuevoAlto);
      canvas.style.width = '100%';
      canvas.style.height = '100%';
      
      // Actualizar posición de etiquetas después del resize
      setTimeout(() => {
        actualizarPosicionEtiquetas();
      }, 100);
    }

    // Controles de botones
    const btnReset = document.getElementById('btn-reset');
    const btnRotar = document.getElementById('btn-rotar');

    // Botón Resetear Vista: ahora pone el modelo en Y = -Math.PI/2
    if (btnReset) {
      btnReset.addEventListener('click', () => {
        if (modelo) {
          modelo.rotation.set(0, -Math.PI/2, 0);
        }
        // Resetear también la corona
        if (corona) {
          corona.rotation.copy(modelo.rotation);
        }
        // Ajustar la cámara para que el modelo se vea más grande
        const box = new THREE.Box3().setFromObject(modelo as any);
        const size = box.getSize(new THREE.Vector3());
        const maxDim = Math.max(size.x, size.y, size.z);
        const fov = camara.fov * (Math.PI / 180);
        let cameraZ = Math.abs(maxDim / 2 / Math.tan(fov / 2));
        cameraZ *= 1.1;
        camara.position.set(cameraZ, cameraZ, cameraZ);
        camara.lookAt(0, 0, 0);
        controles.target.set(0, 0, 0);
        controles.update();
      });
    }

    if (btnRotar) {
      btnRotar.addEventListener('click', () => {
        rotacionAutomatica = !rotacionAutomatica;
        btnRotar.textContent = rotacionAutomatica ? 'Detener Rotación' : 'Rotar Modelo';
      });
    }

    // Listeners para los checkboxes
    const chkCorte = document.getElementById('chk-corte');
    const chkCromosfera = document.getElementById('chk-cromosfera');
    const chkLabels = document.getElementById('chk-labels');
    
    // Forzar estado inicial checked en DOM y variables
    if (chkCorte instanceof HTMLInputElement) {
      chkCorte.checked = true;
      corteActivo = true;
    }
    if (chkCromosfera instanceof HTMLInputElement) {
      chkCromosfera.checked = true;
      cromosferaActiva = true;
    }
    if (chkLabels instanceof HTMLInputElement) {
      chkLabels.checked = true;
      labelsActivos = true;
    }
    
    if (chkCorte instanceof HTMLInputElement) {
      chkCorte.addEventListener('change', (e) => {
        corteActivo = chkCorte.checked;
        actualizarVisibilidad();
        actualizarPosicionEtiquetas();
      });
    }
    if (chkCromosfera instanceof HTMLInputElement) {
      chkCromosfera.addEventListener('change', (e) => {
        cromosferaActiva = chkCromosfera.checked;
        actualizarVisibilidad();
        actualizarPosicionEtiquetas();
      });
    }
    if (chkLabels instanceof HTMLInputElement) {
      chkLabels.addEventListener('change', (e) => {
        labelsActivos = chkLabels.checked;
        actualizarPosicionEtiquetas();
      });
    }
    // Minimizar controles
    const btnMinimizar = document.getElementById('btn-minimizar');
    const controlesOpciones = document.getElementById('controles-opciones');
    let controlesMinimizados = true; // Inicialmente minimizado
    if (btnMinimizar && controlesOpciones) {
      // Aplicar estado inicial minimizado
      controlesOpciones.classList.add('minimizado');
      btnMinimizar.textContent = '+';
      
      btnMinimizar.addEventListener('click', () => {
        controlesMinimizados = !controlesMinimizados;
        if (controlesMinimizados) {
          controlesOpciones.classList.add('minimizado');
          btnMinimizar.textContent = '+';
        } else {
          controlesOpciones.classList.remove('minimizado');
          btnMinimizar.textContent = '_';
        }
      });
    }

    // Pantalla completa en móvil mejorada
    const btnFullscreen = document.getElementById('btn-fullscreen');
    let isFullscreen = false;
    let orientationLocked = false;
    // Detectar iOS/Safari
    function isIOS() {
      return /iPad|iPhone|iPod/.test(navigator.userAgent) && !(typeof window === 'undefined') && (window as any).MSStream === undefined;
    }
    function isSafari() {
      return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
    }
    const esIOS = isIOS();
    const esSafari = isSafari();
    // Mensaje para iOS
    function mostrarMensajeIOS() {
      alert('El modo pantalla completa no es soportado en este dispositivo. Usa el dispositivo en horizontal para mejor experiencia.');
    }
    // Detectar si es móvil
    function isMobile() {
      return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    }
    // En móvil, el tamaño del contenedor lo controla el CSS (media queries). No manipular height/width por JS.
    function ajustarContenedorPorOrientacion() {
      // No hacer nada salvo en desktop si se quiere un alto fijo (opcional)
      if (!contenedor) return;
      if (!(isMobile()) && !(esIOS && esSafari)) {
        contenedor.style.height = '600px';
      }
    }
    // Forzar render inmediato tras resize/orientación
    function forceRender() {
      if (modelo) renderizador.render(escena, camara);
    }
    // Escuchar orientationchange y resize
    window.addEventListener('orientationchange', () => {
      ajustarContenedorPorOrientacion();
      setTimeout(() => {
        onWindowResize();
        forceRender();
        actualizarPosicionEtiquetas();
      }, 100);
    });
    window.addEventListener('resize', () => {
      ajustarContenedorPorOrientacion();
      setTimeout(() => {
        onWindowResize();
        forceRender();
        actualizarPosicionEtiquetas();
      }, 100);
    });
    if (btnFullscreen && contenedor) {
      btnFullscreen.addEventListener('click', async () => {
        if (esIOS || esSafari) {
          mostrarMensajeIOS();
          return;
        } else {
          if (!isFullscreen) {
            if (contenedor.requestFullscreen) {
              await contenedor.requestFullscreen();
              isFullscreen = true;
              // Cambiar icono
              const enterIcon = btnFullscreen.querySelector('.fullscreen-icon.enter');
              const exitIcon = btnFullscreen.querySelector('.fullscreen-icon.exit');
              if (enterIcon && exitIcon) {
                (enterIcon as HTMLElement).style.display = 'none';
                (exitIcon as HTMLElement).style.display = 'block';
              }
              // Forzar orientación horizontal en móvil
              if (window.screen.orientation && window.innerWidth < 800) {
                try {
                  await (window.screen.orientation as any).lock('landscape');
                  orientationLocked = true;
                } catch (e) {
                  // Puede fallar en algunos navegadores
                  orientationLocked = false;
                }
              }
            }
          } else {
            if (document.exitFullscreen) {
              await document.exitFullscreen();
              isFullscreen = false;
              // Cambiar icono
              const enterIcon = btnFullscreen.querySelector('.fullscreen-icon.enter');
              const exitIcon = btnFullscreen.querySelector('.fullscreen-icon.exit');
              if (enterIcon && exitIcon) {
                (enterIcon as HTMLElement).style.display = 'block';
                (exitIcon as HTMLElement).style.display = 'none';
              }
              // Restaurar orientación
              if (window.screen.orientation && orientationLocked) {
                try {
                  await (window.screen.orientation as any).unlock();
                } catch (e) {}
                orientationLocked = false;
              }
            }
          }
        }
      });
      // Detectar salida de fullscreen por otros medios
      document.addEventListener('fullscreenchange', () => {
        ajustarContenedorPorOrientacion();
        isFullscreen = !!document.fullscreenElement;
        // Cambiar icono según el estado
        const enterIcon = btnFullscreen?.querySelector('.fullscreen-icon.enter');
        const exitIcon = btnFullscreen?.querySelector('.fullscreen-icon.exit');
        if (enterIcon && exitIcon) {
          if (isFullscreen) {
            (enterIcon as HTMLElement).style.display = 'none';
            (exitIcon as HTMLElement).style.display = 'block';
          } else {
            (enterIcon as HTMLElement).style.display = 'block';
            (exitIcon as HTMLElement).style.display = 'none';
          }
        }
        if (!isFullscreen && window.screen.orientation && orientationLocked) {
          try { (window.screen.orientation as any).unlock(); } catch (e) {}
          orientationLocked = false;
        }
        // Forzar resize tras salir de fullscreen
        setTimeout(() => {
          onWindowResize();
          forceRender();
          actualizarPosicionEtiquetas();
        }, 100);
      });
    }
    // Ajuste inicial al cargar
    ajustarContenedorPorOrientacion();
    animar();

    // Funciones de debugging para ajustar hotspots y labels
    (window as any).ajustarHotspot3D = ajustarHotspot3D;
    (window as any).hotspots3D = hotspots3D;
    
    // Función para ajustar posiciones de labels 2D (para debugging)
    function ajustarLabel2D(capa: string, x: number, y: number) {
      if (labelPositions[capa as keyof typeof labelPositions]) {
        // Convertir coordenadas de píxeles a porcentajes
        if (!canvas) return;
        const canvasRect = canvas.getBoundingClientRect();
        const porcentajeX = (x / canvasRect.width) * 100;
        const porcentajeY = (y / canvasRect.height) * 100;
        
        labelPositions[capa as keyof typeof labelPositions].x = porcentajeX;
        labelPositions[capa as keyof typeof labelPositions].y = porcentajeY;
        
        console.log(`Label ${capa} ajustado a:`, x, y, `(${porcentajeX.toFixed(1)}%, ${porcentajeY.toFixed(1)}%)`);
        actualizarPosicionEtiquetas();
      }
    }
    
    // Función para obtener las posiciones actuales de las etiquetas
    function obtenerPosicionesLabels() {
      console.log('Posiciones actuales de las etiquetas (porcentajes):');
      Object.keys(labelPositions).forEach(capa => {
        const pos = labelPositions[capa as keyof typeof labelPositions];
        console.log(`${capa}: x=${pos.x.toFixed(1)}%, y=${pos.y.toFixed(1)}%`);
      });
    }
    
    // Función para posicionar etiquetas usando porcentajes del canvas
    function posicionarEtiquetaPorcentaje(capa: string, porcentajeX: number, porcentajeY: number) {
      if (labelPositions[capa as keyof typeof labelPositions]) {
        labelPositions[capa as keyof typeof labelPositions].x = porcentajeX;
        labelPositions[capa as keyof typeof labelPositions].y = porcentajeY;
        console.log(`Label ${capa} posicionado en: ${porcentajeX}%, ${porcentajeY}%`);
        actualizarPosicionEtiquetas();
      }
    }
    
    // Función para posicionar todas las etiquetas usando porcentajes
    function posicionarTodasEtiquetasPorcentaje() {
      const posiciones = {
        nucleo: { x: 55, y: 40 },
        zonaRadiativa: { x: 65, y: 45 },
        zonaConvectiva: { x: 70, y: 50 },
        fotosfera: { x: 75, y: 55 },
        cromosfera: { x: 80, y: 60 },
        corona: { x: 85, y: 65 },
        arcosSolares: { x: 90, y: 70 }
      };
      
      Object.keys(posiciones).forEach(capa => {
        const pos = posiciones[capa as keyof typeof posiciones];
        posicionarEtiquetaPorcentaje(capa, pos.x, pos.y);
      });
    }
    
    (window as any).ajustarLabel2D = ajustarLabel2D;
    (window as any).obtenerPosicionesLabels = obtenerPosicionesLabels;
    (window as any).posicionarEtiquetaPorcentaje = posicionarEtiquetaPorcentaje;
    (window as any).posicionarTodasEtiquetasPorcentaje = posicionarTodasEtiquetasPorcentaje;
    (window as any).labelPositions = labelPositions;
    
    // Limpieza de recursos cuando sea necesario
    window.addEventListener('beforeunload', () => {
      if (dracoLoader) {
        dracoLoader.dispose();
      }
    });
    
    console.log('Funciones de debugging disponibles:');
    console.log('- ajustarHotspot3D(capa, x, y, z)');
    console.log('- hotspots3D (objeto con todas las posiciones)');
    console.log('- ajustarLabel2D(capa, x, y)');
    console.log('- obtenerPosicionesLabels()');
    console.log('- posicionarEtiquetaPorcentaje(capa, porcentajeX, porcentajeY)');
    console.log('- posicionarTodasEtiquetasPorcentaje()');
    console.log('- labelPositions (objeto con todas las posiciones en porcentajes)');
 

  });
</script>

<style>
  .modelo-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    max-width: 1200px;
    margin: 0 auto;
    /* Safe area para iPhone notch (solo top/bottom) */
    padding-top: env(safe-area-inset-top, 0px);
    padding-bottom: env(safe-area-inset-bottom, 0px);
    box-sizing: border-box;
  }

  .floating {
    position: absolute;
    top: 1rem;
    left: 1rem;
    z-index: 20;
    min-width: 220px;
    max-width: 90vw;
    box-shadow: 0 2px 8px rgba(0,0,0,0.15);
  }

  .fullscreen-btn {
    position: absolute;
    top: 1rem;
    right: 1rem;
    z-index: 21;
    background: #fff;
    border: none;
    border-radius: 50%;
    width: 2.5rem;
    height: 2.5rem;
    font-size: 1.5rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background 0.2s;
  }
  .fullscreen-btn:active, .fullscreen-btn:focus {
    background: #e0e0e0;
  }

  .fullscreen-icon {
    width: 20px;
    height: 20px;
    transition: opacity 0.2s;
  }

  .fullscreen-icon.enter {
    display: block;
  }

  .fullscreen-icon.exit {
    display: none;
  }

  #contenedor-modelo {
    width: 90vw;
    max-width: 90vw;
    min-width: 90vw;
    height: auto;
    position: relative;
    left: 50%;
    transform: translateX(-50%);
    /* Safe area para iPhone notch (solo top/bottom) */
    padding-top: env(safe-area-inset-top, 0px);
    padding-bottom: env(safe-area-inset-bottom, 0px);
    box-sizing: border-box;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }

  /* Media queries para móvil vertical y horizontal */
  @media (max-width: 900px) and (orientation: portrait) {
    #contenedor-modelo {
      height: 300px;
    }
  }
  @media (max-width: 900px) and (orientation: landscape) {
    #contenedor-modelo {
      height: 400px;
    }
  }

  #modelo-canvas {
    width: 100%;
    height: 100%;
    display: block;
    box-sizing: border-box;
    user-select: none;
    -webkit-user-drag: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
  }

  .loading-overlay, .error-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    color: white;
    z-index: 10;
  }

  .loading-spinner {
    width: 50px;
    height: 50px;
    border: 4px solid rgba(255, 255, 255, 0.3);
    border-top: 4px solid white;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-bottom: 1rem;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .controles {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    align-items: center;
  }

  .controles button {
    padding: 0.75rem 1.5rem;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 1rem;
    font-weight: 500;
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .controles button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }

  .controles button:active {
    transform: translateY(0);
  }

  .info {
    text-align: center;
    color: #8f8f8f;
    font-size: 0.9rem;
  }

  .info p {
    margin: 0;
  }

  .controles-checkbox {
    background: rgba(48, 120, 255, 0.92); 
    border-radius: 8px;
    box-shadow: 0 2px 6px rgba(0,0,0,0.07);
    padding: 0.5rem 0.5rem 0.5rem 0.5rem;
    min-width: 0;
    max-width: none;
    width: fit-content;
    margin-bottom: 1rem;
    display: flex;
    flex-direction: column;
    gap: 0.7rem;
  }
  .controles-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-weight: bold;
    margin-bottom: 0.1rem;
    background: #2056a8;
    color: #fff;
    border-radius: 6px 6px 0 0;
    padding: 0.3rem 0.3rem;
    white-space: nowrap;
  }
  .controles-header button {
    background: #2056a8;
    border: none;
    font-size: 1.2rem;
    cursor: pointer;
    color: #fff;
    padding: 0 0.5rem;
    border-radius: 4px;
    transition: background 0.2s, color 0.2s;
    white-space: nowrap;
  }
  .controles-header button:hover {
    background: #133a6b;
    color: #e3f0ff;
  }
  .controles-opciones {
    display: flex;
    flex-direction: column;
    margin-top: -0.4rem;
    margin-bottom: 0.2rem;
    margin-left: 0.2rem;
    margin-right: 0.2rem;
    gap: 0.1rem;
    padding: 0;
    transition: none;
  }
  .controles-opciones.minimizado {
    display: none;
    gap: 0;
    padding: 0;
  }
  .controles-opciones label {
    display: flex;
    align-items: center;
    gap: 0.4rem;
    font-size: 1rem;
    margin-bottom: 0.1rem;
    cursor: pointer;
    color: #fff;
    text-shadow: 0 1px 2px #133a6b44;
    white-space: nowrap;
  }
  .controles-opciones button {
    display: block;
    width: 100%;
    margin: 0;
    background: linear-gradient(135deg, #6bb6ff 0%, #3a7bd5 100%);
    color: #fff;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 1rem;
    font-weight: 500;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.08);
    transition: all 0.3s ease;
    padding: 0.6rem 0.5rem;
    white-space: nowrap;
  }
  /* Espaciado extra entre los botones de acción */
  #btn-reset { margin-bottom: 0.3rem; }
  #btn-rotar { margin-bottom: 0.3rem; }
  .controles-opciones button:hover {
    background: linear-gradient(135deg, #3a7bd5 0%, #6bb6ff 100%);
    color: #e3f0ff;
  }
  .controles-opciones button {
    display: block;
    width: 100%;
    margin: 0;
  }

  @media (max-width: 768px) {
    #contenedor-modelo {
      height: 400px;
      padding-top: env(safe-area-inset-top, 0px);
      padding-bottom: env(safe-area-inset-bottom, 0px);
      padding-left: env(safe-area-inset-left, 0px);
      padding-right: env(safe-area-inset-right, 0px);
    }
    
    .controles {
      flex-direction: row;
      justify-content: center;
      flex-wrap: wrap;
    }
    .floating {
      top: 0.5rem;
      left: 0.5rem;
      min-width: 0;
      max-width: none;
      width: fit-content;
      font-size: 0.92rem;
      padding: 0.2rem;
    }
    /* .fullscreen-btn { display: flex; }  Ya está visible en todos los dispositivos */
    #contenedor-modelo.fullscreen {
      height: 100vh !important;
      width: 100vw !important;
      border-radius: 0;
    }
  }
  @media (max-width: 480px) {
    #contenedor-modelo {
      height: 250px;
      padding-top: env(safe-area-inset-top, 0px);
      padding-bottom: env(safe-area-inset-bottom, 0px);
      padding-left: env(safe-area-inset-left, 0px);
      padding-right: env(safe-area-inset-right, 0px);
    }
    .floating {
      min-width: 0;
      max-width: none;
      width: fit-content;
      font-size: 0.88rem;
      padding: 0.1rem;
    }
  }

  /* Estilos para las etiquetas */
  .labels-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 15;
    overflow: visible;
    font-family: Arial, sans-serif;
  }

  .lines-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 14;
    overflow: visible;
  }

  .label-line {
    stroke: #00eaff;
    stroke-width: 3;
    stroke-dasharray: none;
    opacity: 1;
  }

  /* Estilos para las etiquetas mejorados */
  .layer-label {
    position: absolute !important;
    background: rgba(20, 40, 80, 0.98) !important;
    border: 2px solid #00eaff !important;
    border-radius: 10px !important;
    padding: 8px 16px 8px 10px !important;
    font-size: 15px !important;
    font-weight: 600 !important;
    color: #fff !important;
    cursor: pointer !important;
    pointer-events: auto !important;
    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.25) !important;
    transition: all 0.3s ease !important;
    white-space: nowrap !important;
    z-index: 1000 !important;
    display: flex !important;
    align-items: center !important;
    gap: 0.5em !important;
    user-select: none !important;
    transform: translateZ(0) !important;
    font-family: Arial, sans-serif !important;
    line-height: 1.2 !important;
  }
  .layer-label:hover {
    background: #001b63 !important;
    color: #ff00b3 !important;
    border-color: #cf68e9;
    box-shadow: 0 4px 16px rgba(91, 158, 37, 0.822);
    scale: 1.05;
  }
  .layer-label .info-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 2px;
  }
  .layer-label .info-icon svg {
    display: block;
    stroke: #00fcef;
    background: #2a003d;
    border-radius: 50%;
    padding: 1px;
  }
  .layer-label:hover .info-icon svg {
    stroke: #ff00b3;
    background: #000f3f;
  }
  .layer-label .label-text {
    display: inline-block;
    vertical-align: middle;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
  }
  
  /* Cambiar la línea SVG a punteada y color cyan brillante */
  .label-line {
    stroke: #00eaff;
    stroke-width: 3;
    stroke-dasharray: 8, 4;
    opacity: 1;
    filter: drop-shadow(0 1px 2px rgba(0, 234, 255, 0.3));
  }
  
  /* Asegurar que las etiquetas sean visibles en todos los navegadores */
  .layer-label {
    -webkit-font-smoothing: antialiased !important;
    -moz-osx-font-smoothing: grayscale !important;
    backface-visibility: hidden !important;
  }
  
  /* Estilo específico para etiquetas cuando están activas */
  .layer-label[style*="display: block"] {
    opacity: 1 !important;
    visibility: visible !important;
  }
  
  /* Estilo específico para etiquetas cuando están ocultas */
  .layer-label[style*="display: none"] {
    opacity: 0 !important;
    visibility: hidden !important;
  }

  /* Estilos para la ventana de información */
  .info-window {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 2000;
    padding: 20px;
    box-sizing: border-box;
  }

  .info-window-content {
    background: rgba(20, 40, 80, 0.98);
    border: 2px solid #00eaff;
    border-radius: 15px;
    max-width: 500px;
    width: 100%;
    max-height: 80vh;
    overflow-y: auto;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
    position: relative;
  }

  .info-window-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px 20px 15px 20px;
    border-bottom: 1px solid #00eaff;
    background: linear-gradient(135deg, #2056a8 0%, #133a6b 100%);
    border-radius: 13px 13px 0 0;
  }

  .info-window-header h3 {
    margin: 0;
    color: #fff;
    font-size: 1.5rem;
    font-weight: 600;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
  }

  .info-window-close {
    background: none;
    border: none;
    cursor: pointer;
    padding: 5px;
    border-radius: 50%;
    transition: background 0.2s;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .info-window-close:hover {
    background: rgba(255, 255, 255, 0.1);
  }

  .info-window-close svg {
    width: 20px;
    height: 20px;
    stroke: #ff0000;
    fill: #ff0000;
    stroke-width: 1.3px;
    scale: 1.6;
  }

  .info-window-body {
    padding: 20px;
    color: #fff;
    line-height: 1.6;
  }

  .info-section {
    margin-bottom: 20px;
  }

  .info-section:last-child {
    margin-bottom: 0;
  }

  .info-description {
    font-size: 1rem;
    margin-bottom: 15px;
    text-align: justify;
  }

  .info-section h4 {
    color: #00eaff;
    margin: 0 0 8px 0;
    font-size: 1.1rem;
    font-weight: 600;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
  }

  .info-section p {
    margin: 0;
    font-size: 0.95rem;
  }

  .info-section ul {
    margin: 8px 0 0 0;
    padding-left: 20px;
  }

  .info-section li {
    margin-bottom: 5px;
    font-size: 0.95rem;
  }

  /* Scrollbar personalizado para la ventana de información */
  .info-window-content::-webkit-scrollbar {
    width: 12px;
  }

  .info-window-content::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 4px;
  }

  .info-window-content::-webkit-scrollbar-thumb {
    background: #00eaff;
    border-radius: 4px;
  }

  .info-window-content::-webkit-scrollbar-thumb:hover {
    background: #00b8cc;
  }

  /* Firefox */
  .info-window-content {
    scrollbar-width: auto;
    scrollbar-color: #00eaff rgba(255, 255, 255, 0.1);
  }

  /* Internet Explorer y Edge legacy */
  .info-window-content {
    -ms-overflow-style: auto;
  }

  /* Estilos adicionales para mejorar la apariencia en todos los navegadores */
  .info-window-content {
    overflow-y: auto;
    overflow-x: hidden;
  }

  /* Mejoras específicas para navegadores de escritorio */
  @media (min-width: 769px) {
    .info-window-content::-webkit-scrollbar {
      width: 14px;
    }

    .info-window-content::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.15);
      border-radius: 5px;
    }

    .info-window-content::-webkit-scrollbar-thumb {
      background: linear-gradient(135deg, #00eaff 0%, #00b8cc 100%);
      border-radius: 5px;
      border: 1px solid rgba(0, 234, 255, 0.3);
    }

    .info-window-content::-webkit-scrollbar-thumb:hover {
      background: linear-gradient(135deg, #00b8cc 0%, #0099aa 100%);
      border-color: rgba(0, 184, 204, 0.5);
    }

    /* Firefox mejorado para desktop */
    .info-window-content {
      scrollbar-width: auto;
      scrollbar-color: #00eaff rgba(255, 255, 255, 0.15);
    }
  }

  /* Estilos específicos para móvil */
  @media (max-width: 768px) {
    .info-window-content::-webkit-scrollbar {
      width: 10px;
    }

    .info-window-content::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.1);
      border-radius: 3px;
    }

    .info-window-content::-webkit-scrollbar-thumb {
      background: #00eaff;
      border-radius: 3px;
    }

    .info-window-content::-webkit-scrollbar-thumb:hover {
      background: #00b8cc;
    }

    /* Firefox móvil */
    .info-window-content {
      scrollbar-width: thin;
      scrollbar-color: #00eaff rgba(255, 255, 255, 0.1);
    }
  }

  /* Responsive para la ventana de información */
  @media (max-width: 768px) {
    .info-window {
      padding: 10px;
    }
    
    .info-window-content {
      max-width: 100%;
      max-height: 90vh;
    }
    
    .info-window-header {
      padding: 15px 15px 10px 15px;
    }
    
    .info-window-header h3 {
      font-size: 1.3rem;
    }
    
    .info-window-body {
      padding: 15px;
    }
    
    .info-description {
      font-size: 0.95rem;
    }
    
    .info-section h4 {
      font-size: 1rem;
    }
    
    .info-section p,
    .info-section li {
      font-size: 0.9rem;
    }
  }

  /* Estilos específicos para móvil en orientación vertical */
  @media (max-width: 768px) and (orientation: portrait) {
    .info-window {
      padding: 5px;
      align-items: flex-start;
      padding-top: 10px;
    }
    
    .info-window-content {
      max-width: 95%;
      max-height: 85vh;
      margin: 0 auto;
    }
    
    .info-window-header {
      padding: 12px 15px 8px 15px;
      position: sticky;
      top: 0;
      background: linear-gradient(135deg, #2056a8 0%, #133a6b 100%);
      z-index: 10;
    }
    
    .info-window-header h3 {
      font-size: 1.1rem;
      margin-right: 30px; /* Espacio para el botón de cerrar */
    }
    
    .info-window-close {
      position: absolute;
      top: 8px;
      right: 8px;
      background: rgba(255, 0, 0, 0.8);
      border-radius: 50%;
      width: 30px;
      height: 30px;
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 11;
    }
    
    .info-window-close:hover {
      background: rgba(255, 0, 0, 1);
    }
    
    .info-window-close svg {
      width: 16px;
      height: 16px;
      stroke: #ffffff;
      fill: #ffffff;
      stroke-width: 2px;
    }
    
    .info-window-body {
      padding: 12px 15px;
      max-height: calc(85vh - 60px); /* Restar altura del header */
    }
    
    .info-description {
      font-size: 0.9rem;
    }
    
    .info-section h4 {
      font-size: 0.95rem;
    }
    
    .info-section p,
    .info-section li {
      font-size: 0.85rem;
    }
  }

  /* Estilos para pantallas muy pequeñas */
  @media (max-width: 480px) and (orientation: portrait) {
    .info-window {
      align-items: flex-start;
      padding-top: 5px;
    }
    
    .info-window-content {
      max-width: 98%;
      max-height: 80vh;
    }
    
    .info-window-header {
      padding: 10px 12px 6px 12px;
    }
    
    .info-window-header h3 {
      font-size: 1rem;
    }
    
    .info-window-close {
      width: 28px;
      height: 28px;
      top: 6px;
      right: 6px;
    }
    
    .info-window-close svg {
      width: 14px;
      height: 14px;
    }
    
    .info-window-body {
      padding: 10px 12px;
    }
    
    .info-description {
      font-size: 0.85rem;
    }
    
    .info-section h4 {
      font-size: 0.9rem;
    }
    
    .info-section p,
    .info-section li {
      font-size: 0.8rem;
    }
  }
</style>
